plugins {
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

base {
    archivesBaseName = project.archives_base_name
}
version = project.mod_version + "-" + project.minecraft_version + "-forge"
group = project.maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: project.minecraft_version
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg '-torg.spongepowered.asm.launch.MixinTweaker'

            mods {
                mcwifipnp {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.neoforged:forge:${project.minecraft_version}-${project.forge_version}"
    implementation 'org.spongepowered:mixin:0.8.2'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

sourceSets {
	main {
		java {
			srcDir "../src/main/java"
		}
		resources {
			srcDir "../src/main/resources"
		}
	}
}

jar {
    manifest {
        attributes([
                "Specification-Title": "LAN World Plug-n-Play",
                "Specification-Vendor": "Satxm",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor": "Satxm",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    from("../LICENSE") {
	}
}

java {
    withSourcesJar()
}

def resourceTargets = ['META-INF/mods.toml']
def replaceProperties = [version : project.mod_version, mc_version : project.forge_minecraft_version_range, forge_version : project.forge_version_range, loader_version : project.forge_loader_version_range]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

mixin {
    config 'mcwifipnp.mixins.json'
    disableAnnotationProcessorCheck()
}
