buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

archivesBaseName = project.archives_base_name
version = project.mod_version + "-" + project.minecraft_version + "-forge"
group = project.maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: project.minecraft_version

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                mcwifipnp {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

sourceSets {
	main {
		java {
			srcDir "../src/main/java"
		}
		resources {
			srcDir "../src/main/resources"
		}
	}
}

jar {
    manifest {
        attributes([
                "Specification-Title": "Minecraft WLAN Plug-n-Play",
                "Specification-Vendor": "Satxm",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor": "Satxm",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
	from("../LICENSE") {
}
}

def replaceResources = tasks.register("replaceResources", Copy) {
	it.outputs.upToDateWhen { false }
	//Copy it into the build dir
	it.from(sourceSets.main.resources) {
		include "META-INF/mods.toml"
		expand 'version': project.version, 'mc_version': project.minecraft_version_range, 'forge_version': project.forge_version_range, "loader_version": project.loader_version_range
	}
	it.into "$buildDir/resources/main/"
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	exclude('META-INF/mods.toml')
	configure { finalizedBy(replaceResources) }
}

classes.configure {
	dependsOn(replaceResources)
}

java {
    withSourcesJar()
}
