plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
}

version = project.mod_version + "-" + project.minecraft_version + "-neoforge"
group = project.mod_group_id

base {
    archivesName = project.mod_id
}

repositories {
    mavenLocal()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets {
	main {
		java {
			srcDir "../src/main/java"
		}
		resources {
			srcDir "../src/main/resources"
            srcDir "src/generated/resources"
		}
	}
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
        mod_version: project.mod_version,
        neo_version_range : project.neo_version_range,
        neo_loader_version_range : project.neo_loader_version_range,
        minecraft_version_range : project.neo_minecraft_version_range,
        pack_format_number: project.pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}


jar {
	from("../LICENSE") {
	}
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
	it.options.release = 17
}
